"""
Django settings for rcwsmgmt project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from django.utils.crypto import get_random_string

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', None)
if SECRET_KEY is None:
    SECRET_FILE = os.path.join(BASE_DIR, '.secret')
    if os.path.exists(SECRET_FILE):
        with open(SECRET_FILE, 'r') as f:
            SECRET_KEY = f.read().strip()
    else:
        chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
        SECRET_KEY = get_random_string(50, chars)
        with open(SECRET_FILE, 'w') as f:
            os.chmod(SECRET_FILE, 0o600)
            try:
                os.chown(SECRET_FILE, os.getuid(), os.getgid())
            except AttributeError:
                pass  # os.chown is not available on Windows
            f.write(SECRET_KEY)


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'False').lower() in ['true', 'yes', '1']

ALLOWED_HOSTS = [] if os.environ.get('DJANGO_ALLOWED_HOSTS', None) is None else os.environ.get('DJANGO_ALLOWED_HOSTS', None).split(',')
CSRF_TRUSTED_ORIGINS = [] if os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS', None) is None else os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS', None).split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_bootstrap5",
    "base",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "rcwsmgmt.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "rcwsmgmt.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        'ENGINE': 'django.db.backends.' + os.environ.get('DJANGO_DB_BACKEND', 'sqlite3'),
        'NAME': os.environ.get('DJANGO_DB_NAME', os.path.join(BASE_DIR, 'db.sqlite3')),
        'USER': os.environ.get('DJANGO_DB_USER', ''),
        'PASSWORD': os.environ.get('DJANGO_DB_PASSWORD', ''),
        'HOST': os.environ.get('DJANGO_DB_HOST', ''),
        'PORT': os.environ.get('DJANGO_DB_PORT', ''),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.environ.get('DJANGO_STATIC_ROOT', './collected_static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

EMAIL_FROM = os.environ['EMAIL_FROM']
EMAIL_HOST = os.environ['EMAIL_HOST']
EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']
EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER']
EMAIL_PORT = int(os.environ['EMAIL_PORT'])
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', "y").lower() in ["true", "1", "y", "yes"]



LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

WORKSHOPS_PER_PARTICIPANT = int(os.environ.get('WORKSHOPS_PER_PARTICIPANT', 6))

PRETIX_URL = os.environ['PRETIX_URL']
PRETIX_ORGANIZER = os.environ['PRETIX_ORGANIZER']
PRETIX_EVENT = os.environ['PRETIX_EVENT']
PRETIX_AUTH_TOKEN = os.environ['PRETIX_AUTH_TOKEN']
PRETIX_WORKSHOP_PRODUCT_ID = int(os.environ['PRETIX_WORKSHOP_PRODUCT_ID'])
PRETIX_WORKSHOP_QUESTION_NAME = os.environ['PRETIX_WORKSHOP_QUESTION_NAME']
PRETIX_WORKSHOP_QUESTION_DESCRIPTION = os.environ['PRETIX_WORKSHOP_QUESTION_DESCRIPTION']
PRETIX_ORDER_CLAN_PRODUCT_ID = int(os.environ['PRETIX_ORDER_CLAN_PRODUCT_ID'])
PRETIX_ORDER_CLAN_QUESTION_NAME = os.environ['PRETIX_ORDER_CLAN_QUESTION_NAME']
PRETIX_ORDER_CLAN_QUESTION_DISTRICT = os.environ['PRETIX_ORDER_CLAN_QUESTION_DISTRICT']
PRETIX_ORDER_CLAN_CONTACT_GIVENNAME = os.environ['PRETIX_ORDER_CLAN_CONTACT_GIVENNAME']
PRETIX_ORDER_CLAN_CONTACT_FAMILYNAME = os.environ['PRETIX_ORDER_CLAN_CONTACT_FAMILYNAME']
